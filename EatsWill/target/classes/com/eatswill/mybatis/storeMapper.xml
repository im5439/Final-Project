<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="storeMapper">


<!-- 전체 메뉴리스트  -->
<select id="menuList" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select * from (
	select rownum rnum, data.* from (
	select menuCode,menuImg,menuName,menuPrice
	from menu where shopCode=#{shopCode}) data)
	order by rnum
</select>

<!-- 한가지 메뉴의 상세페이지  -->
<select id="menuListOne" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select menuCode,menuName,menuPrice,shopCode from menu where menuCode=#{menuCode}
</select>

<!-- 음식점 정보  -->
<select id="shopInfo" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
select s.shoptel,s.shopCode,s.shopname,s.shopImg,s.shopAddr,s.ceoid,c.CEONAME,a.CODENAME timeName, r.reScore
from shop s, ceo c, common_code a, (select avg(reScore) reScore,shopCode from review group by shopCode) r
where s.CEOID=c.CEOID and s.timeCODE=a.CODE and s.shopCode=r.shopCode and s.CEOID=#{ceoId} and s.shopCode=#{shopCode}
</select>

<!-- 음식점 메인정보  -->

<!-- review maxNum  -->
<select id="maxNum" resultType="int">
	select nvl(max(renum),0) from review
</select>

<!-- 리뷰 리스트  -->
<select id="reviewList" resultType="com.eatswill.dto.StoreDTO" parameterType="hashMap">
	select rpad(substr(r.userId,1,3),6,'*') userId,r.reScore,to_char(reCreated,'yyyy-mm-dd hh:mm'),r.reCreated,r.reContent ,r.reImg,r.shopCode,m.menuName,r.renum,r.pnum
	from review r, orderdetail o,menu m 
	where r.orderCode=o.orderCode and o.menuCode=m.menuCode and r.shopCode=#{shopCode} order by r.pnum,r.renum
</select>

<!-- 리뷰 인서트  -->
<insert id="insertReview" parameterType="com.eatswill.dto.StoreDTO">
	insert into review (orderCode,pnum,reNum,userId,shopCode,reScore,reContent,reCreated,reImg) 
	values (#{orderCode},#{pnum},#{reNum},#{userId},#{shopCode},#{reScore},#{reContent},sysdate,#{reImg})
</insert>

<!-- 장바구니 인서트  -->
<insert id="insertCart" parameterType="com.eatswill.dto.StoreDTO">
	insert into cart (userId,menuCode,cQty,cAmount,shopCode) values
	(#{userId},#{menuCode},#{cQty},#{cAmount},#{shopCode})
</insert>

<!-- 장바구니 업데이트(같은메뉴코드일시 수량과 가격만 변경)  -->
<update id="updateCart" parameterType="com.eatswill.dto.StoreDTO">
	update cart set cQty=cQty+#{cQty},cAmount=cAmount+#{cAmount} 
	where userId=#{userId} and menuCode=#{menuCode}
</update>
<!-- 장바구니 리스트  -->
<select id="selectList" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.menuCode=m.menuCode and c.userId=#{userId}
</select>

<!-- 장바구니 셀렉트 검증 -->
<select id="selectCart" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.menuCode=m.menuCode and c.userId=#{userId} and c.menuCode=#{menuCode}
</select>

<!-- 장바구니 변경 (다른 음식점 추가시)  -->
<!-- 장바구니 shopCode 확인 -->
<select id="cartChkShop" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select shopCode from cart where shopCode=#{shopCode} and userId=#{userId}
</select>
<!-- 장바구니 delete  -->
<delete id="deleteCart">
	delete from cart where userId=#{userId}
</delete>

<!-- 찜 테이블 셀렉트  -->
<select id="heartSelect" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select userId,shopCode from heart where userId=#{userId} and shopCode=#{shopCode}
</select>
<!-- 찜 테이블 인서트  -->
<insert id="heartInsert" parameterType="hashMap">
	insert into heart (userId,shopCode) values (#{userId},#{shopCode})
</insert>

<!-- 찜 테이블 딜리트  -->
<delete id="heartDelete" parameterType="hashMap">
	delete from heart where userId=#{userId} and shopCode=#{shopCode}
</delete>

<!-- 한개의 음식점 셀렉트  -->
<select id="shopSelectOne"  parameterType="int" resultType="com.eatswill.dto.StoreDTO">
	select shopname,shopcode,ceoid,category,shoptel,shopimg,franchise,shopcreated,shopaddr,timecode
	 from shop where shopcode=${shopCode}
</select>

<!-- 전체 음식점 리스트(기본정렬)   -->
<select id="shopList" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select shopname,shopcode,ceoid,category,shoptel,shopimg,franchise,shopaddr,timecode,
	to_char(shopcreated,'YYYY-MM-DD') shopcreated 
	from shop 
	order by shopname desc
</select>

<!-- 음식점 리스트 (리뷰순 정렬)  -->
<select id="orderByRe" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated from shop s,(select nvl(count(*),0) reCount,shopCode from review group by shopCode) r
	where s.shopCode=r.shopCode order by r.reCount desc
</select>

<!-- 음식점 리스트 (주문순 정렬)  -->
<select id="orderByO" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated from shop s,(select nvl(count(*),0) orderCount,shopCode from ordermain group by shopCode) o
	where s.shopCode=o.shopCode order by o.orderCount desc
</select>

<!-- 음식점 리스트 (별점순 정렬)  -->
<select id="orderByRes" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated,res.rescore from shop s,(select avg(reScore) reScore,shopCode from review group by shopCode)  res
	where s.shopCode=res.shopCode order by res.rescore desc
</select>

</mapper>