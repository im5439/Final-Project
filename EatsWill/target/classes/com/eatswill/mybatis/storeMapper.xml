<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="storeMapper">


<!-- 전체 메인 메뉴리스트  -->
<select id="menuList" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select * from (
	select rownum rnum, data.* from (
	select menuCode,menuImg,menuName,menuPrice
	from menu where shopCode=#{shopCode} and part='0') data)
	order by rnum
</select>

<!-- 사이드 메뉴리스트  -->
<select id="sideMenuList" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select * from (
	select rownum rnum, data.* from (
	select menuCode,menuImg,menuName,menuPrice
	from menu where shopCode=#{shopCode} and part='1') data)
	order by rnum
</select>

<!-- 한가지 메뉴의 상세페이지  -->
<select id="menuListOne" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select menuCode,menuName,menuPrice,shopCode from menu where menuCode=#{menuCode}
</select>

<!-- 음식점 정보  -->
<select id="shopInfo" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
select s.shoptel,s.shopCode,s.shopname,s.shopImg,s.shopAddr,s.ceoid,c.CEONAME,a.CODENAME timeName, r.reScore
from shop s, ceo c, common_code a, (select avg(reScore) reScore,shopCode from review group by shopCode) r
where s.CEOID=c.CEOID and s.timeCODE=a.CODE and s.shopCode=r.shopCode(+) and s.CEOID=#{ceoId} and s.shopCode=#{shopCode}
</select>

<!-- 리뷰 리스트  -->
<select id="reviewList" resultType="com.eatswill.dto.StoreDTO" parameterType="String">
	SELECT om.userId, s.shopname,r1.rescore,r1.rescore*20 reStar,r1.recreated,data1.menuname,r1.recontent,r1.reImg reImg,r1.renum,r1.ceocontent,om.ORDERDATE
from review r1,shop s,(select ot.ordercode, listagg(m.menuname,',') within group (order by m.menuname) menuname from ORDERDETAIL ot,menu m where ot.MENUCODE=m.MENUCODE group by ot.ordercode) data1,ordermain om
where r1.shopcode=#{shopCode} and data1.orderCode=r1.orderCode and s.shopCode=r1.shopcode and data1.orderCode=om.ORDERCODE
ORDER BY recreated desc
</select>

<!-- 신고 인서트  -->
<insert id="insertReport" parameterType="com.eatswill.dto.StoreDTO">
	insert into report values (#{userId},#{reNum})
</insert>

<!-- 신고,리뷰 테이블 딜리트(신고 3번이상이면 게시물 자동삭제)  -->
<delete id="deleteReview">
	delete review where renum = (select renum from report group by renum having count(*)>=3)
</delete>
<delete id="deleteReport">
	delete report where renum = (select renum from report group by renum having count(*)>=3)
</delete>

<!-- 장바구니 인서트  -->
<insert id="insertCart" parameterType="com.eatswill.dto.StoreDTO">
	insert into cart (userId,menuCode,sideMenuCode,cQty,cAmount,shopCode) values
	(#{userId},#{menuCode},#{sideMenuCode},#{cQty},#{cAmount},#{shopCode})
</insert>

<!-- 장바구니 업데이트(같은메뉴코드일시 수량과 가격만 변경)  -->
<update id="updateCart" parameterType="com.eatswill.dto.StoreDTO">
	update cart set cQty=cQty+#{cQty},cAmount=cAmount+#{cAmount} 
	where userId=#{userId} and menuCode=#{menuCode} and sideMenuCode=#{sideMenuCode}
</update>
<!-- 장바구니 셀렉트 검증 -->
<select id="selectCart" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode,c.sideMenuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.menuCode=m.menuCode and c.userId=#{userId} and c.menuCode=#{menuCode} 
</select>

<!-- 장바구니 셀렉트 사이드 메뉴 검증 -->
<select id="chkCartSide" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode,c.sideMenuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.menuCode=m.menuCode and c.userId=#{userId} and c.menuCode=#{menuCode}  and c.sideMenuCode=#{sideMenuCode} 
</select>


<!-- 장바구니 셀렉트  -->
<select id="selectCartAll" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
select distinct c.shopCode,c.sideMenuCode,c.cqty,c.cAmount,s.shopName,m.menuName,(select sum(cAmount) from cart where userId=#{userId}) orderSum
from Cart c, shop s,menu m 
where c.shopCode=s.shopCode and c.sidemenuCode=m.menuCode and m.shopCode=s.shopCode and userId=#{userId} order by c.cAmount desc
</select>
<select id="selectCartMain" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.menuCode=m.menuCode and c.menuCode=c.sideMenuCode and c.userId=#{userId}
</select>
<select id="selectCartSide" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select c.menuCode, c.sideMenuCode,c.cAmount,c.cQty,c.userId,m.menuName,m.menuPrice
	from cart c, menu m
	where c.sideMenuCode=m.menuCode and c.menuCode != c.sideMenuCode  and c.userId=#{userId}
</select>
<!-- 메뉴코드별 사이드메뉴의 합  -->
<select id="selectMenuPrice" resultType="com.eatswill.dto.StoreDTO" parameterType="String">
	select sum(cAmount) sideSum  from cart where menuCode != sideMenuCode and userId=#{userId} GROUP by menuCode
</select>

<!-- 장바구니 변경 (다른 음식점 추가시)  -->
<!-- 장바구니 shopCode 확인 -->
<select id="cartChkShop" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select shopCode from cart where shopCode=#{shopCode} and userId=#{userId}
</select>
<!-- 장바구니 delete  -->
<delete id="deleteCart" parameterType="String">
	delete from cart where userId=#{userId}
</delete>

<!-- 장바구니 하나씩 delete  -->
<delete id="deleteCartOne" parameterType="hashMap">
	delete from cart where menuCode=#{menuCode} and userId=#{userId}
</delete>

<!-- 찜 테이블 셀렉트  -->
<select id="heartSelect" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select userId,shopCode from heart where userId=#{userId} and shopCode=#{shopCode}
</select>
<!-- 찜 테이블 인서트  -->
<insert id="heartInsert" parameterType="hashMap">
	insert into heart (userId,shopCode) values (#{userId},#{shopCode})
</insert>

<!-- 찜 테이블 딜리트  -->
<delete id="heartDelete" parameterType="hashMap">
	delete from heart where userId=#{userId} and shopCode=#{shopCode}
</delete>

<!-- 전체 음식점 리스트(기본정렬)   -->
<select id="shopList" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select shopname,shopcode,ceoid,category,shoptel,shopimg,franchise,shopaddr,timecode,
	to_char(shopcreated,'YYYY-MM-DD') shopcreated 
	from shop 
	order by shopname desc
</select>

<!-- 음식점 리스트 (리뷰순 정렬)  -->
<select id="orderByRe" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated from shop s,(select nvl(count(*),0) reCount,shopCode from review group by shopCode) r
	where s.shopCode=r.shopCode(+) order by r.reCount
</select>

<!-- 음식점 리스트 (주문순 정렬)  -->
<select id="orderByO" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated from shop s,(select nvl(count(*),0) orderCount,shopCode from ordermain group by shopCode) o
	where s.shopCode=o.shopCode order by o.orderCount,s.shopName desc
</select>

<!-- 음식점 리스트 (별점순 정렬)  -->
<select id="orderByRes" parameterType="hashMap" resultType="com.eatswill.dto.StoreDTO">
	select s.shopname,s.shopcode,s.ceoid,s.category,s.shoptel,s.shopimg,s.franchise,s.shopaddr,s.timecode,
	to_char(s.shopcreated,'YYYY-MM-DD') shopcreated,res.rescore from shop s,(select avg(reScore) reScore,shopCode from review group by shopCode)  res
	where s.shopCode=res.shopCode(+) order by res.rescore
</select>

<!-- 결제창  -->
<!-- 고객정보  -->
<select id="selectOrderInfo" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select userName,userTel,userPoint,userAddr1,(select count(*) from cart where userId=#{userId}) count from custom where userId=#{userId}
</select>

<!-- shopName select  -->
<select id="selectOrderShopName" parameterType="String" resultType="com.eatswill.dto.StoreDTO">
	select distinct s.shopName,s.shopCode from cart c, shop s 
where c.shopCode=s.shopCode and userId=#{userId}
</select>
</mapper>