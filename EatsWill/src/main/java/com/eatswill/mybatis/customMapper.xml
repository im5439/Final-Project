<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="customMapper">

<!-- 주문표 개수 -->
<select id="countCart" parameterType="String" resultType="String">
	select nvl(sum(cqty), 0) from cart where USERID=#{id}
</select>

<!-- 주문표 내역 -->
<select id="cartOpen" parameterType="String" resultType="String">
	select s.shopcode || ',' || s.ceoid from cart c, shop s 
	where c.shopcode = s.shopcode and c.userId=#{id} group by s.ceoid, s.shopcode
</select>

<!-- 회원가입시 아이디 중복확인 -->
<select id="selectCustom" parameterType="String" resultType="String">
	select USERID id from custom where USERID=#{id}
</select>

<!-- 아이디 비밀번호 찾기 -->
<select id="tryIdPw" parameterType="hashMap" resultType="com.eatswill.dto.CustomDTO">
	select USERID id, USERPW pw, USERNAME name, USEREMAIL email from custom where ${user}=#{id} and USEREMAIL=#{email}
</select>

<!-- 로그인시 세션에 들어가는 customInfo 정보 -->
<select id="checkIdPw" parameterType="hashMap" resultType="com.eatswill.dto.CustomDTO">
	select 	USERID id, USERPW pw, USERNAME name, USERTEL tel, 
			USEREMAIL email, USERPOINT point, USERADDR1 addr1, USERADDR2 addr2 
	from 	custom 
	where 	USERID=#{id} and USERPW=#{pw}
</select>

<!-- 회원 가입 -->
<insert id="insertCustom" parameterType="com.eatswill.dto.CustomDTO">
	insert into custom (USERID,USERPW,USERNAME,USERTEL,USEREMAIL,USERPOINT,USERADDR1,useraddr2) 
	values (#{id},#{pw},#{name},#{tel},#{email},1000,#{addr1},#{addr2})
</insert>

<!-- 회원 수정 -->
<update id="updateCustom" parameterType="com.eatswill.dto.CustomDTO">
	update custom set USERNAME=#{name}, USERTEL=#{tel}, USEREMAIL=#{email}, USERADDR1=#{addr1}, USERADDR2=#{addr2}, userpw=#{pw} where USERID=#{id}
</update>

<!-- 회원 탈퇴 -->
<delete id="deleteCustom" parameterType="String">
	delete custom where USERID=#{id}
</delete>

<!-- 정보 수정 후 세션에 있는 정보 업데이트 -->
<select id="renewSession" parameterType="String" resultType="com.eatswill.dto.CustomDTO">
	select 	USERID id, USERPW pw, USERNAME name, USERTEL tel, 
			USEREMAIL email, USERPOINT point, USERADDR1 addr1, USERADDR2 addr2
	from 	custom 
	where 	USERID=#{id}
</select>

<!-- 해당 아이디의 주문 리스트 출력 -->
<select id="getBuyList" parameterType="String" resultType="com.eatswill.dto.MyDTO">
	SELECT om.orderdate, om.ordercode, s.shopname,s.shopCode shopCode, om.oamount, data1.menuname, cc.codename orderstatus, s.shopimg shopImg, data2.cnt cnt,om.request,s.ceoId
from ordermain om, shop s, COMMON_CODE cc,(select ot.ordercode, listagg(m.menuname,',') within group (order by m.menuname) menuname from ORDERDETAIL ot, menu m where ot.MENUCODE=m.MENUCODE group by ot.ordercode) data1,
(select a.ordercode, count(b.ordercode) cnt from ORDERMAIN a left outer join REVIEW b on a.ORDERCODE=b.ORDERCODE group by a.ordercode) data2
where om.orderstatus=cc.code and om.userid=#{userId} and om.shopcode=s.shopcode and om.ordercode=data1.ordercode and om.ordercode = data2.ordercode
order by orderdate desc
</select>

<!-- 주문 취소버튼 클릭시 -->
<update id="myOrderCancel" parameterType="String">
	update orderMain set orderStatus=400 where orderCode=#{orderCode}
</update>

<!-- 해당 주문코드와 아이디로 리뷰가 작성 됐는지 확인후 리뷰쓰기 대신 리뷰보기 띄우기 -->
<select id="getReadCheckReview" parameterType="hashMap" resultType="com.eatswill.dto.MyDTO">
	select ORDERCODE,RECONTENT,USERID from review where userid=#{userId} and ORDERCODE=#{orderCode}
</select>

<!-- 리뷰 작성시 띄울 정보 -->
<select id="getReadReviewData" parameterType="String"  resultType="com.eatswill.dto.MyDTO">
	SELECT om.orderdate,om.ordercode,s.shopname, s.shopCode shopCode,om.oamount,data1.menuname,cc.codename orderstatus,s.shopimg shopImg
	from ordermain om, shop s, COMMON_CODE cc,(select ot.ordercode, listagg(m.menuname,',') within group (order by m.menuname) menuname from ORDERDETAIL ot,menu m where ot.MENUCODE=m.MENUCODE group by ot.ordercode) data1
	where om.orderstatus=cc.code and om.ordercode=#{orderCode} and om.shopcode=s.shopcode and om.ordercode=data1.ordercode
</select>

<!-- 리뷰 num -->
<select id="maxReNum" resultType="int">
	select nvl(max(reNum),0) from review
</select>

<!-- 리뷰 insert -->
<insert id="reviewInsert" parameterType="com.eatswill.dto.MyDTO">
	insert into review(orderCode,ceoContent,reNum,userId,shopCode,reScore,reContent,reCreated,reImg)
	values (#{orderCode},null,#{reNum},#{userId},#{shopCode},#{reScore},#{reContent},sysdate,#{reImg})
</insert>

<!-- 자신이 쓴 리뷰 개수 -->
<select id="myReviewCnt" parameterType="String" resultType="int">
	select count(*) reCnt from REVIEW where userId=#{userId}
</select>

<!-- 자신이 쓴 리뷰 리스트 -->
<select id="getMyReviewList" parameterType="String" resultType="com.eatswill.dto.MyDTO">
	SELECT r1.userId, s.shopname,r1.rescore,r1.rescore*20 reStar,r1.recreated,data1.menuname,r1.recontent,r1.reImg reImg,r1.renum,r1.ceocontent,om.ORDERDATE,om.shopcode,s.ceoid
from review r1,shop s,ordermain om, (select ot.ordercode, listagg(m.menuname,',') within group (order by m.menuname) menuname from ORDERDETAIL ot,menu m where ot.MENUCODE=m.MENUCODE group by ot.ordercode) data1
where r1.userid=#{userId} and data1.orderCode=r1.orderCode and s.shopCode=r1.shopcode and data1.orderCode=om.ORDERCODE
ORDER BY recreated desc
</select>

<!-- 자신이 쓴 리뷰 삭제 -->
<delete id="reviewDelete" parameterType="int">
	delete review where renum=#{renum}
</delete>

<!-- 해당 아이디의 찜 리스트 출력 -->
<select id="getHeartList" parameterType="String" resultType="com.eatswill.dto.MyDTO">
	SELECT s.shopImg shopImg, s.shopname shopName, data1.shopScore, data1.reCnt, data1.shopScore*20 shopStar,s.ceoId
	from shop s,heart h,(select SHOPCODE, round(AVG(rescore),1) shopScore, count(reNum) reCnt from review group by shopcode) data1
	where s.shopcode=data1.shopCode and data1.shopCode=h.shopcode and h.userid=#{userid}
</select>

</mapper>